// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/praction-networks/acs-proxy/internal/config"
	"github.com/praction-networks/acs-proxy/internal/database/mongodb"
	"github.com/praction-networks/acs-proxy/internal/dependency"
	"github.com/praction-networks/acs-proxy/internal/genieacs"
	"github.com/praction-networks/acs-proxy/internal/handlers"
	"github.com/praction-networks/acs-proxy/internal/logging"
	"github.com/praction-networks/acs-proxy/internal/monitoring"
	"github.com/praction-networks/acs-proxy/internal/services"
	"go.mongodb.org/mongo-driver/mongo"
)

// Injectors from injector.go:

// Production Container Initialization
func InitializeContainer() (*dependency.AppContainer, error) {
	envConfig := config.ProvideConfig()
	logger := logging.ProvideLogger(envConfig)
	client, err := mongodb.ProvideMongoDB(envConfig)
	if err != nil {
		return nil, err
	}
	connectionMonitor := ProvideConnectionMonitor(client)
	string2 := mongodb.ProvideMongoDBName(envConfig)
	deviceRepository := mongodb.ProvideMongoSkeletonRepository(client, string2)
	geniacsConfig := config.ProvideGeniacsConfig(envConfig)
	genieacsClient := genieacs.NewClient(geniacsConfig)
	deviceService := services.NewDeviceService(deviceRepository, genieacsClient)
	deviceHandler := handlers.NewDeviceHandler(deviceService)
	appContainer := &dependency.AppContainer{
		Config:            envConfig,
		Logger:            logger,
		MongoClient:       client,
		ConnectionMonitor: connectionMonitor,
		DeviceRepository:  deviceRepository,
		DeviceService:     deviceService,
		DeviceHandler:     deviceHandler,
	}
	return appContainer, nil
}

// ✅ Initialize Test Container
func InitializeTestContainer(testCfg TestConfig) (*dependency.AppContainer, error) {
	envConfig := config.ProvideConfig()
	logger := logging.ProvideLogger(envConfig)
	client, err := mongodb.ProvideMongoDB(envConfig)
	if err != nil {
		return nil, err
	}
	connectionMonitor := ProvideConnectionMonitor(client)
	string2 := mongodb.ProvideMongoDBName(envConfig)
	deviceRepository := mongodb.ProvideMongoSkeletonRepository(client, string2)
	geniacsConfig := config.ProvideGeniacsConfig(envConfig)
	genieacsClient := genieacs.NewClient(geniacsConfig)
	deviceService := services.NewDeviceService(deviceRepository, genieacsClient)
	deviceHandler := handlers.NewDeviceHandler(deviceService)
	appContainer := &dependency.AppContainer{
		Config:            envConfig,
		Logger:            logger,
		MongoClient:       client,
		ConnectionMonitor: connectionMonitor,
		DeviceRepository:  deviceRepository,
		DeviceService:     deviceService,
		DeviceHandler:     deviceHandler,
	}
	return appContainer, nil
}

// injector.go:

var mongoDBSet = wire.NewSet(mongodb.ProvideMongoDB, mongodb.ProvideMongoDBName)

var genieACSClientSet = wire.NewSet(config.ProvideGeniacsConfig, genieacs.NewClient)

var repositorySet = wire.NewSet(mongodb.ProvideMongoSkeletonRepository)

// ✅ Service and Handler Providers
var serviceSet = wire.NewSet(services.NewDeviceService)

var handlerSet = wire.NewSet(handlers.NewDeviceHandler)

var monitoringSet = wire.NewSet(
	ProvideConnectionMonitor,
)

func ProvideConnectionMonitor(mongo2 *mongo.Client,
) *monitoring.ConnectionMonitor {
	return monitoring.New(mongo2)
}

// ✅ Test Configuration Struct
type TestConfig struct {
	MongoURI string
	NatsURI  string
}

// ✅ Provide Test Configuration
func ProvideTestConfig(testCfg TestConfig) config.EnvConfig {
	return config.EnvConfig{
		ServerEnv: config.ServerConfig{
			Port: "3000",
		},
		MongoDBEnv: config.MongoConfig{
			URI:      testCfg.MongoURI,
			Database: "testdb",
		},
		LoggerEnv: config.LoggerConfig{
			LogLevel: "debug",
		},
	}
}
